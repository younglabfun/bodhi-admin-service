// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	account "bodhiadmin/app/admin/api/internal/handler/account"
	menu "bodhiadmin/app/admin/api/internal/handler/menu"
	node "bodhiadmin/app/admin/api/internal/handler/node"
	nodeGroup "bodhiadmin/app/admin/api/internal/handler/nodeGroup"
	role "bodhiadmin/app/admin/api/internal/handler/role"
	user "bodhiadmin/app/admin/api/internal/handler/user"
	"bodhiadmin/app/admin/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: account.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: account.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/account"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/refresh-token",
				Handler: account.RefreshTokenHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/reset-password",
				Handler: account.SetPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: account.UpdateAccountHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: account.GetAccountHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get-permission",
				Handler: account.GetPermissionHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/account"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/insert",
				Handler: menu.InsertHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: menu.UpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update-status",
				Handler: menu.UpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove",
				Handler: menu.RemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:id",
				Handler: menu.GetMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get-menu-list",
				Handler: menu.GetMenuListByPidHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get-menu-tree",
				Handler: menu.GetMenuListByTypeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get-admin-menu",
				Handler: menu.GetAdminMenuHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/menu"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/insert",
				Handler: node.InsertNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: node.UpdateNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update-status",
				Handler: node.UpdateNodeStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove",
				Handler: node.RemoveNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:id",
				Handler: node.GetNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get-list-data",
				Handler: node.GetListDataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get-list/:id",
				Handler: node.GetNodeListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list-group-node",
				Handler: node.ListNodeByGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/batch-move-group",
				Handler: node.BatchMoveGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/batch-remove",
				Handler: node.BatchRemoveHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/node"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/insert",
				Handler: nodeGroup.InsertGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: nodeGroup.UpdateGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove",
				Handler: nodeGroup.RemoveGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:id",
				Handler: nodeGroup.GetGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get-list",
				Handler: nodeGroup.GetGroupListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/nodeGroup"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/insert",
				Handler: role.InsertRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: role.UpdateRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update-status",
				Handler: role.UpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove",
				Handler: role.RemoveRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: role.ListRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get-list",
				Handler: role.GetListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:uuid",
				Handler: role.GetRoleHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/role"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/insert",
				Handler: user.InsertUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: user.UpdateUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update-status",
				Handler: user.UpdateUserStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update-password",
				Handler: user.UpdatePasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove",
				Handler: user.RemoveUserHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: user.ListUserHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:uuid",
				Handler: user.GetUserHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get-user-roles/:uuid",
				Handler: user.GetUserRolesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/set-user-role",
				Handler: user.SetUserRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove-user-role",
				Handler: user.RemoveUserRoleHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/user"),
	)
}
