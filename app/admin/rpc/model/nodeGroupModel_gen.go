// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"gorm.io/gorm"
	"gorm.io/plugin/soft_delete"
)

var ()

type (
	nodeGroupModel interface {
		Insert(ctx context.Context, data *NodeGroup) error
		FindOne(ctx context.Context, id int64) (*NodeGroup, error)
		FindOneByName(ctx context.Context, name string) (*NodeGroup, error)
		Update(ctx context.Context, data *NodeGroup) error
		Delete(ctx context.Context, id int64) error

		FindAll(ctx context.Context) ([]*NodeGroup, error)
	}

	defaultNodeGroupModel struct {
		conn  *gorm.DB
		table string
	}

	NodeGroup struct {
		Id        int64                 `gorm:"column:id"`                 // 功能分组ID
		Title     string                `gorm:"column:title"`              // 分组名称
		Name      string                `gorm:"column:name"`               // 分组id
		Sort      int64                 `gorm:"column:sort"`               // 排序
		IsDeleted soft_delete.DeletedAt `gorm:"softDelete:flag,default:0"` // 是否删除
		CreatedAt int64                 `gorm:"<-:create;autoCreateTime"`  // 添加时间
	}
)

func (NodeGroup) TableName() string {
	return "`node_group`"
}

func newNodeGroupModel(conn *gorm.DB) *defaultNodeGroupModel {
	return &defaultNodeGroupModel{
		conn:  conn,
		table: "`node_group`",
	}
}

func (m *defaultNodeGroupModel) Insert(ctx context.Context, data *NodeGroup) error {
	err := m.conn.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultNodeGroupModel) FindOne(ctx context.Context, id int64) (*NodeGroup, error) {
	var resp NodeGroup
	err := m.conn.WithContext(ctx).Model(&NodeGroup{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNodeGroupModel) FindOneByName(ctx context.Context, name string) (*NodeGroup, error) {
	var resp NodeGroup
	err := m.conn.WithContext(ctx).Model(&NodeGroup{}).Where("`name` = ?", name).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNodeGroupModel) Update(ctx context.Context, data *NodeGroup) error {
	err := m.conn.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultNodeGroupModel) Delete(ctx context.Context, id int64) error {
	err := m.conn.WithContext(ctx).Delete(&NodeGroup{}, id).Error

	return err
}

func (m *defaultNodeGroupModel) tableName() string {
	return m.table
}

func (m *defaultNodeGroupModel) FindAll(ctx context.Context) ([]*NodeGroup, error) {
	var resp []*NodeGroup
	db := m.conn.WithContext(ctx).Model(&NodeGroup{})
	err := db.Order("sort ASC, created_at DESC").Find(&resp).Error

	if err != nil {
		return nil, err
	}
	return resp, nil
}
