// Code generated by goctl. DO NOT EDIT!

package model

import (
	"bodhiadmin/common/utils"
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"gorm.io/gorm"
	"gorm.io/plugin/soft_delete"
)

var ()

type (
	roleModel interface {
		Insert(ctx context.Context, data *Role) error
		FindOne(ctx context.Context, roleUuid string) (*Role, error)
		Update(ctx context.Context, data *Role) error
		Delete(ctx context.Context, roleUuid string) error

		UpdateStatus(ctx context.Context, roleUuid, status string) error
		FindAll(ctx context.Context) ([]*Role, error)
		FindListByPage(ctx context.Context, req PageReq) ([]*Role, int64, error)
	}

	defaultRoleModel struct {
		conn  *gorm.DB
		table string
	}

	Role struct {
		RoleUuid      string                `gorm:"column:role_uuid;primaryKey"`           // 角色UUID
		Name          string                `gorm:"column:name"`                           // 角色名称
		Description   string                `gorm:"column:description"`                    // 角色说明
		AuthorizeJson string                `gorm:"column:authorize_json;serializer:json"` // 应用功能授权
		IsDefault     int64                 `gorm:"default:0"`                             // 是否默认角色模版
		IsEnabled     int64                 `gorm:"default:1"`                             // 是否启用
		IsDeleted     soft_delete.DeletedAt `gorm:"softDelete:flag,default:0"`             // 是否删除
		CreatedAt     int64                 `gorm:"<-:create;autoCreateTime"`              // 添加时间
	}
)

func (Role) TableName() string {
	return "`role`"
}

func newRoleModel(conn *gorm.DB) *defaultRoleModel {
	return &defaultRoleModel{
		conn:  conn,
		table: "`role`",
	}
}

func (m *defaultRoleModel) Insert(ctx context.Context, data *Role) error {
	err := m.conn.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultRoleModel) FindOne(ctx context.Context, roleUuid string) (*Role, error) {
	var resp Role
	err := m.conn.WithContext(ctx).Model(&Role{}).Where("`role_uuid` = ?", roleUuid).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) Update(ctx context.Context, data *Role) error {
	err := m.conn.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultRoleModel) Delete(ctx context.Context, roleUuid string) error {
	err := m.conn.WithContext(ctx).Delete(&Role{}, roleUuid).Error

	return err
}

func (m *defaultRoleModel) tableName() string {
	return m.table
}

func (m *defaultRoleModel) UpdateStatus(ctx context.Context, roleUuid, colum string) error {
	old, err := m.FindOne(ctx, roleUuid)
	if err != nil {
		return err
	}

	data := 0
	if colum == "IsEnabled" {
		if old.IsEnabled == 0 {
			data = 1
		}
	} else if colum == "IsDefault" {
		if old.IsDefault == 0 {
			data = 1
		}
	}

	db := m.conn.WithContext(ctx).Model(&Role{})
	err = db.Where("role_uuid = ?", roleUuid).Update(colum, data).Error
	return err
}

func (m *defaultRoleModel) FindAll(ctx context.Context) ([]*Role, error) {
	var list []*Role
	db := m.conn.WithContext(ctx).Model(&Role{})
	db.Order("created_at DESC")
	err := db.Find(&list).Error

	if err != nil {
		return nil, err
	}
	return list, nil
}

func (m *defaultRoleModel) FindListByPage(ctx context.Context, req PageReq) ([]*Role, int64, error) {
	var list []*Role
	var total int64
	sortBy := utils.GetSortByStr(req.Sort, req.Order, Role{})
	db := m.conn.WithContext(ctx).Model(&Role{})
	if len(req.Field) == 0 {
		db.Where("name LIKE ?", "%"+req.Value+"%")
	} else {
		db.Where("? LIKE ?", req.Field, "%"+req.Value+"%")
	}
	db.Count(&total)
	db.Scopes(utils.Paginate(req.Page, req.Size))
	db.Order(sortBy)
	err := db.Find(&list).Error
	if err != nil {
		return nil, 0, nil
	}
	return list, total, nil
}
