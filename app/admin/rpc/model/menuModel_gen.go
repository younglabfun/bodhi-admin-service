// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"gorm.io/gorm"
	"gorm.io/plugin/soft_delete"
)

var ()

type (
	menuModel interface {
		Insert(ctx context.Context, data *Menu) error
		FindOne(ctx context.Context, id int64) (*Menu, error)
		FindOneByFuncCode(ctx context.Context, funcCode string) (*Menu, error)
		Update(ctx context.Context, data *Menu) error
		Delete(ctx context.Context, id int64) error

		FindListByPid(ctx context.Context, pid, menuType int64) ([]*Menu, error)
		FindAllByType(ctx context.Context, menuType int64) ([]*Menu, error)
		UpdateStatus(ctx context.Context, id int64, column string) error
	}

	defaultMenuModel struct {
		conn  *gorm.DB
		table string
	}

	Menu struct {
		Id        int64                 `gorm:"column:id"`
		Pid       int64                 `gorm:"column:pid"`                // 父id
		Type      int64                 `gorm:"column:type"`               // 菜单类型，0管理后台，1前台
		Title     string                `gorm:"column:title"`              // 菜单名
		FuncCode  string                `gorm:"column:func_code"`          // 功能标识，用于控制权限
		Route     string                `gorm:"column:route"`              // 路由名
		Component string                `gorm:"column:component"`          // 组件
		Icon      string                `gorm:"column:icon"`               // 菜单图标
		Href      string                `gorm:"column:href"`               // 链接
		Sort      int64                 `gorm:"column:sort"`               // 菜单排序
		IsShow    int64                 `gorm:"default:1"`                 // 是否显示
		IsEnabled int64                 `gorm:"default:1"`                 // 是否启用
		IsDeleted soft_delete.DeletedAt `gorm:"softDelete:flag,default:0"` // 是否删除
		CreatedAt int64                 `gorm:"<-:create;autoCreateTime"`  // 添加时间
	}
)

func (Menu) TableName() string {
	return "`menu`"
}

func newMenuModel(conn *gorm.DB) *defaultMenuModel {
	return &defaultMenuModel{
		conn:  conn,
		table: "`menu`",
	}
}

func (m *defaultMenuModel) Insert(ctx context.Context, data *Menu) error {
	err := m.conn.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultMenuModel) FindOne(ctx context.Context, id int64) (*Menu, error) {
	var resp Menu
	err := m.conn.WithContext(ctx).Model(&Menu{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) FindOneByFuncCode(ctx context.Context, funcCode string) (*Menu, error) {
	var resp Menu
	err := m.conn.WithContext(ctx).Model(&Menu{}).Where("`func_code` = ?", funcCode).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) FindListByPid(ctx context.Context, pid, menuType int64) ([]*Menu, error) {
	var resp []*Menu
	db := m.conn.WithContext(ctx).Model(&Menu{})
	db.Where("type = ?", menuType)
	db.Where("pid = ?", pid)
	db.Order("sort ASC, created_at DESC")
	err := db.Find(&resp).Error
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultMenuModel) FindAllByType(ctx context.Context, menuType int64) ([]*Menu, error) {
	var resp []*Menu
	db := m.conn.WithContext(ctx).Model(&Menu{})
	db.Where("type = ?", menuType)
	db.Order("sort ASC, created_at DESC")
	err := db.Find(&resp).Error
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultMenuModel) Update(ctx context.Context, data *Menu) error {
	err := m.conn.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultMenuModel) UpdateStatus(ctx context.Context, id int64, column string) error {
	old, err := m.FindOne(ctx, id)
	if err != nil && err != ErrNotFound {
		return err
	}
	data := 0
	if column == "IsEnabled" {
		if old.IsEnabled == 0 {
			data = 1
		}
	} else if column == "IsShow" {
		if old.IsShow == 0 {
			data = 1
		}
	}

	err = m.conn.Model(&Menu{}).Where("id = ?", id).Update(column, data).Error
	return err
}

func (m *defaultMenuModel) Delete(ctx context.Context, id int64) error {
	err := m.conn.WithContext(ctx).Delete(&Menu{}, id).Error

	return err
}

func (m *defaultMenuModel) tableName() string {
	return m.table
}
