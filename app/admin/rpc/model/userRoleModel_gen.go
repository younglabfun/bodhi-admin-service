// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"gorm.io/gorm"
)

var ()

type (
	userRoleModel interface {
		Insert(ctx context.Context, data *UserRole) error
		FindOne(ctx context.Context, id int64) (*UserRole, error)
		Update(ctx context.Context, data *UserRole) error
		Delete(ctx context.Context, id int64) error

		FindUserRoles(ctx context.Context, userUuid string) ([]*UserRole, error)
	}

	defaultUserRoleModel struct {
		conn  *gorm.DB
		table string
	}

	UserRole struct {
		Id        int64  `gorm:"column:id;primaryKey;unique"`
		UserUuid  string `gorm:"column:user_uuid;primaryKey"` // 用户UUID
		RoleUuid  string `gorm:"column:role_uuid;primaryKey"` // 角色UUID
		CreatedAt int64  `gorm:"<-:create;autoCreateTime"`    // 添加时间

		Role Role `gorm:"foreignKey:RoleUuid;references:RoleUuid"`
	}
)

func (UserRole) TableName() string {
	return "`user_role`"
}

func newUserRoleModel(conn *gorm.DB) *defaultUserRoleModel {
	return &defaultUserRoleModel{
		conn:  conn,
		table: "`user_role`",
	}
}

func (m *defaultUserRoleModel) Insert(ctx context.Context, data *UserRole) error {
	err := m.conn.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultUserRoleModel) FindOne(ctx context.Context, id int64) (*UserRole, error) {
	var resp UserRole
	err := m.conn.WithContext(ctx).Model(&UserRole{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRoleModel) Update(ctx context.Context, data *UserRole) error {
	err := m.conn.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultUserRoleModel) Delete(ctx context.Context, id int64) error {
	err := m.conn.WithContext(ctx).Delete(&UserRole{}, id).Error

	return err
}

func (m *defaultUserRoleModel) tableName() string {
	return m.table
}

func (m *defaultUserRoleModel) FindUserRoles(ctx context.Context, userUuid string) ([]*UserRole, error) {
	var resp []*UserRole
	db := m.conn.WithContext(ctx).Model(&UserRole{})
	db.Where("`user_uuid` = ?", userUuid)
	db.Preload("Role")
	err := db.Find(&resp).Error
	if err != nil {
		return nil, err
	}
	return resp, err
}
