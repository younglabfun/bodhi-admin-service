// Code generated by goctl. DO NOT EDIT!

package model

import (
	"bodhiadmin/common/utils"
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"gorm.io/gorm"
	"gorm.io/plugin/soft_delete"
)

var ()

type (
	userModel interface {
		Insert(ctx context.Context, data *User) error
		FindOne(ctx context.Context, userUuid string) (*User, error)
		FindOneByEmail(ctx context.Context, email string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, userUuid string) error

		CreateUser(ctx context.Context, data *User) error
		FindOneByUsername(ctx context.Context, username string) (*User, error)
		FindOneByFields(ctx context.Context, field string) (*User, error)
		FindListByPage(ctx context.Context, req PageReq) ([]*User, int64, error)
		UpdatePassword(ctx context.Context, userUuid, password, salt string) error
		UpdateStatus(ctx context.Context, userUuid string) error
		UpdateLoginData(ctx context.Context, userUuid, clientIp string) error
	}

	defaultUserModel struct {
		conn  *gorm.DB
		table string
	}

	User struct {
		UserUuid       string                `gorm:"column:user_uuid;primaryKey;unique"` // 用户UUID
		Username       string                `gorm:"column:username"`                    // 用户名
		Password       string                `gorm:"column:password"`                    // 密码
		Email          string                `gorm:"column:email"`                       // Email
		Name           string                `gorm:"column:name"`                        // 名称
		Avatar         string                `gorm:"column:avatar"`                      // 头像
		Remark         string                `gorm:"column:remark"`                      // 备注
		LastLoginIp    string                `gorm:"column:last_login_ip"`               // 最后登陆IP
		LastLoginTime  int64                 `gorm:"column:last_login_time"`             // 最后登陆时间
		LastActiveIp   string                `gorm:"column:last_active_ip"`              // 最后活跃ip
		LastActiveTime int64                 `gorm:"column:last_active_time"`            // 最后活跃时间（毫秒）
		CustomData     string                `gorm:"serializer:json"`                    // 用户数据json
		MailVerified   int64                 `gorm:"default:0"`                          // 邮箱验证
		IsEnabled      int64                 `gorm:"default:1"`                          // 是否启用
		IsDeleted      soft_delete.DeletedAt `gorm:"softDelete:flag,default:0"`          // 是否删除
		CreatedAt      int64                 `gorm:"<-:create;autoCreateTime"`           // 添加时间
	}
)

func (User) TableName() string {
	return "`user`"
}

func newUserModel(conn *gorm.DB) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) error {
	err := m.conn.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, userUuid string) (*User, error) {
	var resp User
	err := m.conn.WithContext(ctx).Model(&User{}).Where("`user_uuid` = ?", userUuid).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email string) (*User, error) {
	var resp User
	err := m.conn.WithContext(ctx).Model(&User{}).Where("`email` = ?", email).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Update(ctx context.Context, data *User) error {
	err := m.conn.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultUserModel) Delete(ctx context.Context, userUuid string) error {
	err := m.conn.WithContext(ctx).Delete(&User{}, userUuid).Error

	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}

func (m *defaultUserModel) CreateUser(ctx context.Context, data *User) error {
	err := m.conn.WithContext(ctx).Create(&data).Error
	return err
}

func (m *defaultUserModel) FindOneByUsername(ctx context.Context, username string) (*User, error) {
	var resp User
	db := m.conn.WithContext(ctx).Model(&User{})
	err := db.Where("`username` = ?", username).Take(&resp).Error

	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByFields(ctx context.Context, field string) (*User, error) {
	user, err := m.FindOneByUsername(ctx, field)
	if err != nil {
		return nil, err
	}
	if user != nil {
		return user, nil
	}

	user, err = m.FindOneByEmail(ctx, field)
	if err != nil {
		return nil, err
	}
	return user, nil
}

func (m *defaultUserModel) FindListByPage(ctx context.Context, req PageReq) ([]*User, int64, error) {
	var list []*User
	var total int64

	sortBy := utils.GetSortByStr(req.Sort, req.Order, User{})
	db := m.conn.WithContext(ctx).Model(User{})
	if len(req.Field) == 0 && len(req.Value) != 0 {
		db.Where("`username` LIKE ? OR `email` LIKE ? OR `name` LIKE ?", req.Value)
	}
	db.Count(&total)
	db.Scopes(utils.Paginate(req.Page, req.Size))
	db.Order(sortBy)
	err := db.Find(&list).Error

	if err != nil {
		return nil, 0, nil
	}
	return list, total, nil
}

func (m *defaultUserModel) UpdatePassword(ctx context.Context, userUuid, password, salt string) error {
	_, err := m.FindOne(ctx, userUuid)
	if err != nil {
		return err
	}
	pwd := utils.GetHashedPassword(password, salt)
	db := m.conn.WithContext(ctx).Model(&User{})
	err = db.Where("user_uuid = ?", userUuid).Update("password", pwd).Error
	return err
}

func (m *defaultUserModel) UpdateStatus(ctx context.Context, userUuid string) error {
	old, err := m.FindOne(ctx, userUuid)
	if err != nil {
		return err
	}
	data := 0
	if old.IsEnabled == 0 {
		data = 1
	}
	db := m.conn.WithContext(ctx).Model(&User{})
	err = db.Where("user_uuid = ?", userUuid).Update("IsEnabled", data).Error
	return err
}

func (m *defaultUserModel) UpdateLoginData(ctx context.Context, userUuid, clientIp string) error {
	_, err := m.FindOne(ctx, userUuid)
	if err != nil {
		return err
	}
	update := map[string]interface{}{
		"last_login_ip":    clientIp,
		"last_login_time":  utils.GetTimestamp(),
		"last_active_ip":   clientIp,
		"last_active_time": utils.GetTimestamp(),
	}
	db := m.conn.WithContext(ctx).Model(&User{})
	err = db.Where("user_uuid = ?", userUuid).Updates(update).Error
	return err
}
