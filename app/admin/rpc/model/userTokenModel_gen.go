// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"errors"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"gorm.io/gorm"
	"time"
)

var ()

type (
	userTokenModel interface {
		Insert(ctx context.Context, data *UserToken) error
		FindOne(ctx context.Context, id int64) (*UserToken, error)
		FindOneByUserUuid(ctx context.Context, userUuid string) (*UserToken, error)
		Update(ctx context.Context, data *UserToken) error
		Delete(ctx context.Context, id int64) error

		SaveRefreshToken(ctx context.Context, userUuid, refreshToken string, refreshExpired int64) error
		CheckRefreshToken(ctx context.Context, userUuid, refreshToken string) bool
	}

	defaultUserTokenModel struct {
		conn  *gorm.DB
		table string
	}

	UserToken struct {
		Id           int64  `gorm:"column:id"`
		UserUuid     string `gorm:"column:user_uuid"`     // 用户UUID
		RefreshToken string `gorm:"column:refresh_token"` // 更新token
		ExpiresTime  int64  `gorm:"column:expires_time"`  // 过期时间（秒）
		CreatedAt    int64  `gorm:"column:created_at"`    // 添加时间(毫秒)
	}
)

func (UserToken) TableName() string {
	return "`user_token`"
}

func newUserTokenModel(conn *gorm.DB) *defaultUserTokenModel {
	return &defaultUserTokenModel{
		conn:  conn,
		table: "`user_token`",
	}
}

func (m *defaultUserTokenModel) Insert(ctx context.Context, data *UserToken) error {
	err := m.conn.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultUserTokenModel) FindOne(ctx context.Context, id int64) (*UserToken, error) {
	var resp UserToken
	err := m.conn.WithContext(ctx).Model(&UserToken{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTokenModel) FindOneByUserUuid(ctx context.Context, userUuid string) (*UserToken, error) {
	var resp UserToken
	err := m.conn.WithContext(ctx).Model(&UserToken{}).Where("`user_uuid` = ?", userUuid).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTokenModel) Update(ctx context.Context, data *UserToken) error {
	err := m.conn.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultUserTokenModel) Delete(ctx context.Context, id int64) error {
	err := m.conn.WithContext(ctx).Delete(&UserToken{}, id).Error

	return err
}

func (m *defaultUserTokenModel) tableName() string {
	return m.table
}

func (m *defaultUserTokenModel) SaveRefreshToken(ctx context.Context, userUuid, refreshToken string, refreshExpired int64) error {
	token, err := m.FindOneByUserUuid(ctx, userUuid)
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	expired := time.Now().Unix() + refreshExpired
	if token == nil {
		err = m.Insert(ctx, &UserToken{
			UserUuid:     userUuid,
			RefreshToken: refreshToken,
			ExpiresTime:  expired,
		})
	} else {
		token.RefreshToken = refreshToken
		token.ExpiresTime = expired
		err = m.Update(ctx, token)
	}
	if err != nil {
		return err
	}
	return nil
}

func (m *defaultUserTokenModel) CheckRefreshToken(ctx context.Context, userUuid, refreshToken string) bool {
	token, err := m.FindOneByUserUuid(ctx, userUuid)
	if err != nil {
		return false
	}
	if token.RefreshToken != refreshToken {
		return false
	}
	if token.ExpiresTime <= time.Now().Unix() {
		return false
	}
	return true
}
