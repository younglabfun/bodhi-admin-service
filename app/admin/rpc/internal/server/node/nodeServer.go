// Code generated by goctl. DO NOT EDIT.
// Source: admin.proto

package server

import (
	"context"

	"bodhiadmin/app/admin/rpc/internal/logic/node"
	"bodhiadmin/app/admin/rpc/internal/svc"
	"bodhiadmin/app/admin/rpc/proto/admin"
)

type NodeServer struct {
	svcCtx *svc.ServiceContext
	admin.UnimplementedNodeServer
}

func NewNodeServer(svcCtx *svc.ServiceContext) *NodeServer {
	return &NodeServer{
		svcCtx: svcCtx,
	}
}

func (s *NodeServer) InsertNode(ctx context.Context, in *admin.NodeReq) (*admin.AffectedResp, error) {
	l := nodelogic.NewInsertNodeLogic(ctx, s.svcCtx)
	return l.InsertNode(in)
}

func (s *NodeServer) UpdateNode(ctx context.Context, in *admin.NodeReq) (*admin.AffectedResp, error) {
	l := nodelogic.NewUpdateNodeLogic(ctx, s.svcCtx)
	return l.UpdateNode(in)
}

func (s *NodeServer) UpdateStatus(ctx context.Context, in *admin.Id) (*admin.AffectedResp, error) {
	l := nodelogic.NewUpdateStatusLogic(ctx, s.svcCtx)
	return l.UpdateStatus(in)
}

func (s *NodeServer) RemoveNode(ctx context.Context, in *admin.Id) (*admin.AffectedResp, error) {
	l := nodelogic.NewRemoveNodeLogic(ctx, s.svcCtx)
	return l.RemoveNode(in)
}

func (s *NodeServer) GetNode(ctx context.Context, in *admin.Id) (*admin.NodeUnit, error) {
	l := nodelogic.NewGetNodeLogic(ctx, s.svcCtx)
	return l.GetNode(in)
}

func (s *NodeServer) GetList(ctx context.Context, in *admin.Empty) (*admin.NodeListResp, error) {
	l := nodelogic.NewGetListLogic(ctx, s.svcCtx)
	return l.GetList(in)
}

func (s *NodeServer) GetNodeListByGid(ctx context.Context, in *admin.Id) (*admin.NodeListResp, error) {
	l := nodelogic.NewGetNodeListByGidLogic(ctx, s.svcCtx)
	return l.GetNodeListByGid(in)
}

func (s *NodeServer) ListNode(ctx context.Context, in *admin.PageReq) (*admin.ListNodeResp, error) {
	l := nodelogic.NewListNodeLogic(ctx, s.svcCtx)
	return l.ListNode(in)
}

func (s *NodeServer) BatchMove(ctx context.Context, in *admin.MoveReq) (*admin.AffectedResp, error) {
	l := nodelogic.NewBatchMoveLogic(ctx, s.svcCtx)
	return l.BatchMove(in)
}

func (s *NodeServer) BatchRemove(ctx context.Context, in *admin.BatchIdsReq) (*admin.AffectedResp, error) {
	l := nodelogic.NewBatchRemoveLogic(ctx, s.svcCtx)
	return l.BatchRemove(in)
}
